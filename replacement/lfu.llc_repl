#include "cache.h"

uint32_t counts[LLC_SET][LLC_WAY]; //记录访问次数的二维数组

static uint64_t miss_count;
static uint64_t hit_count;

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    cout << "Initialize LFU state" << endl;
    for (int i = 0; i < LLC_SET; i++) {
        for (int j = 0; j < LLC_WAY; j++) {
            counts[i][j] = 0;
        }
    }
    miss_count = 0;
    hit_count = 0;
}

// find replacement victim

uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK* current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    uint32_t min_way = -1; //访问次数最小的way
    uint64_t min_count = -1; //访问最小的次数

    //寻找访问次数最少的way,进行遍历两两比较,找到并返回
    for (uint32_t i = 0; i < LLC_WAY; i++) {
        if (counts[set][i] < min_count) {
            min_count = counts[set][i];
            min_way = i;
        }
    }
    
    return min_way;

}
// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    if (type != WRITEBACK || (type == WRITEBACK && !hit)) {
        lru_update(set, way);
    }

    if (hit) {
        counts[set][way] += 1;

    }
    else {
        counts[set][way] = 1;

    }
    hit_count++;
    if (hit_count == 50) {
        miss_count = 0;
        hit_count = 0;
    }
}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{

}